{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fokin\\\\Documents\\\\Coding\\\\16-9 React Quiz\\\\quizzical\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Welcome from \"./components/Welcome\";\nimport Quiz from \"./components/Quiz\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [started, setStarted] = React.useState(false);\n  const [allQuestions, setAllQuestions] = React.useState([]);\n  const [isCompleted, setIsCompleted] = React.useState(false);\n  const [restarted, setRestarted] = React.useState(false);\n\n  //Getting data from the API\n  //Rearranging data for future use \n  React.useEffect(() => {\n    fetch(\"https://opentdb.com/api.php?amount=5&difficulty=easy&type=multiple\").then(res => res.json()).then(data => setAllQuestions(data.results.map(obj => {\n      const {\n        question,\n        correct_answer,\n        incorrect_answers\n      } = obj;\n      const allAnswers = [correct_answer, ...incorrect_answers];\n      return {\n        question,\n        allAnswers: shuffleResults(allAnswers),\n        correctAnswer: correct_answer\n      };\n    })));\n  }, [restarted]);\n\n  //Shuffling order of answers \n  function shuffleResults(arr) {\n    for (let i = arr.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n    return arr;\n  }\n  function startGame() {\n    setStarted(true);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: started === false ? /*#__PURE__*/_jsxDEV(Welcome, {\n      startGame: startGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(Quiz, {\n        allQuestions: allQuestions,\n        isCompleted: isCompleted,\n        setIsCompleted: setIsCompleted,\n        setStarted: setStarted,\n        restarted: restarted,\n        setRestarted: setRestarted\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n\n// Some ToDos for the project development: \n// 1. Separate DataFetcher in a separate component (using render props?)\n// 2. Error handling (catch err and control it in state)\n// 3. Add a \"Loading...\" screen while the data is loading \n_s(App, \"KGWxX5azznpJ98gzOLOEnadSLkY=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Welcome","Quiz","App","started","setStarted","useState","allQuestions","setAllQuestions","isCompleted","setIsCompleted","restarted","setRestarted","useEffect","fetch","then","res","json","data","results","map","obj","question","correct_answer","incorrect_answers","allAnswers","shuffleResults","correctAnswer","arr","i","length","j","Math","floor","random","temp","startGame"],"sources":["C:/Users/fokin/Documents/Coding/16-9 React Quiz/quizzical/src/App.js"],"sourcesContent":["import React from \"react\"\nimport Welcome from \"./components/Welcome\"\nimport Quiz from \"./components/Quiz\"\n\nexport default function App() {\n\n    const [started, setStarted] = React.useState(false)\n    const [allQuestions, setAllQuestions] = React.useState([])\n    const [isCompleted, setIsCompleted] = React.useState(false)\n    const [restarted, setRestarted] = React.useState(false)\n\n    //Getting data from the API\n    //Rearranging data for future use \n    React.useEffect(() => {\n        fetch(\"https://opentdb.com/api.php?amount=5&difficulty=easy&type=multiple\")\n            .then(res => res.json())\n            .then(data => setAllQuestions(data.results.map(obj => {\n                const { question, correct_answer, incorrect_answers } = obj\n                const allAnswers = [correct_answer, ...incorrect_answers]\n                return {\n                    question,\n                    allAnswers: shuffleResults(allAnswers),\n                    correctAnswer: correct_answer\n                }\n            })))\n    }, [restarted])\n\n    //Shuffling order of answers \n    function shuffleResults(arr) {\n        for (let i = arr.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n        return arr\n    }\n\n    function startGame() {\n        setStarted(true)\n    }\n\n    return (\n        <div>\n            {\n                started === false ?\n                    <Welcome startGame={startGame} /> :\n                    <section>\n                        <Quiz allQuestions={allQuestions}\n                            isCompleted={isCompleted}\n                            setIsCompleted={setIsCompleted}\n                            setStarted={setStarted}\n                            restarted={restarted}\n                            setRestarted={setRestarted}\n                             />\n                    </section>\n            }\n        </div>\n    )\n}\n\n// Some ToDos for the project development: \n// 1. Separate DataFetcher in a separate component (using render props?)\n// 2. Error handling (catch err and control it in state)\n// 3. Add a \"Loading...\" screen while the data is loading "],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,IAAI,MAAM,mBAAmB;AAAA;AAEpC,eAAe,SAASC,GAAG,GAAG;EAAA;EAE1B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGL,KAAK,CAACM,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,KAAK,CAACM,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACG,WAAW,EAAEC,cAAc,CAAC,GAAGV,KAAK,CAACM,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACK,SAAS,EAAEC,YAAY,CAAC,GAAGZ,KAAK,CAACM,QAAQ,CAAC,KAAK,CAAC;;EAEvD;EACA;EACAN,KAAK,CAACa,SAAS,CAAC,MAAM;IAClBC,KAAK,CAAC,oEAAoE,CAAC,CACtEC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAIV,eAAe,CAACU,IAAI,CAACC,OAAO,CAACC,GAAG,CAACC,GAAG,IAAI;MAClD,MAAM;QAAEC,QAAQ;QAAEC,cAAc;QAAEC;MAAkB,CAAC,GAAGH,GAAG;MAC3D,MAAMI,UAAU,GAAG,CAACF,cAAc,EAAE,GAAGC,iBAAiB,CAAC;MACzD,OAAO;QACHF,QAAQ;QACRG,UAAU,EAAEC,cAAc,CAACD,UAAU,CAAC;QACtCE,aAAa,EAAEJ;MACnB,CAAC;IACL,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,EAAE,CAACZ,SAAS,CAAC,CAAC;;EAEf;EACA,SAASe,cAAc,CAACE,GAAG,EAAE;IACzB,KAAK,IAAIC,CAAC,GAAGD,GAAG,CAACE,MAAM,GAAG,CAAC,EAAED,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACrC,IAAIE,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,IAAIL,CAAC,GAAG,CAAC,CAAC,CAAC;MAC3C,IAAIM,IAAI,GAAGP,GAAG,CAACC,CAAC,CAAC;MACjBD,GAAG,CAACC,CAAC,CAAC,GAAGD,GAAG,CAACG,CAAC,CAAC;MACfH,GAAG,CAACG,CAAC,CAAC,GAAGI,IAAI;IACjB;IACA,OAAOP,GAAG;EACd;EAEA,SAASQ,SAAS,GAAG;IACjB/B,UAAU,CAAC,IAAI,CAAC;EACpB;EAEA,oBACI;IAAA,UAEQD,OAAO,KAAK,KAAK,gBACb,QAAC,OAAO;MAAC,SAAS,EAAEgC;IAAU;MAAA;MAAA;MAAA;IAAA,QAAG,gBACjC;MAAA,uBACI,QAAC,IAAI;QAAC,YAAY,EAAE7B,YAAa;QAC7B,WAAW,EAAEE,WAAY;QACzB,cAAc,EAAEC,cAAe;QAC/B,UAAU,EAAEL,UAAW;QACvB,SAAS,EAAEM,SAAU;QACrB,YAAY,EAAEC;MAAa;QAAA;QAAA;QAAA;MAAA;IACxB;MAAA;MAAA;MAAA;IAAA;EACD;IAAA;IAAA;IAAA;EAAA,QAEhB;AAEd;;AAEA;AACA;AACA;AACA;AAAA,GA5DwBT,GAAG;AAAA,KAAHA,GAAG;AAAA;AAAA"},"metadata":{},"sourceType":"module"}